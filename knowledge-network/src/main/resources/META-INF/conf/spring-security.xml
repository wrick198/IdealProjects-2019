<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/security/oauth2
                        http://www.springframework.org/schema/security/spring-security-oauth2-1.0.xsd
                        http://www.springframework.org/schema/security
	                    http://www.springframework.org/schema/security/spring-security-4.1.xsd">

    <!--
    OAuth2：密码授权模式
    授权/oauth/token请求参数：
        client_id：客户端id
        client_secret：客户端secret
        grant_type：默认"password"
        username：用户名
        password：密码
        scope：授权级别，可填"read","write"或"trust"

    OAuth2：授权码模式
    获取授权码/oauth/authorize请求参数：
        client_id：客户端id
        redirect_uri：获得授权码之后，服务提供商重定向用户代理(比如浏览器)的地址
        response_type：表明授权类型，默认值是"code"
        scope：授权级别，默认"read"
        state：表示客户端的当前状态，可以指定任意值，认证服务器会原封不动地返回这个值，用于抵制CSRF攻击。
    授权/oauth/token请求参数：
        client_id：客户端id
        client_secret：客户端secret
        grant_type：刚刚获得的授权码
        redirect_uri：重定向URI，与上一步一致

    刷新access token /oauth/token请求参数：
        client_id：
        client_secret：
        grant_type：默认"refresh_token"
        refresh_token：
    -->

    <!--授权服务：Token获取-->
    <http pattern="/oauth/token"
          create-session="stateless"
          authentication-manager-ref="oauth2AuthenticationManager"
          entry-point-ref="oauth2AuthenticationEntryPoint">
        <anonymous enabled="false"/>
        <csrf disabled="true"/>
        <http-basic entry-point-ref="oauth2AuthenticationEntryPoint"/>
        <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
    </http>

    <http pattern="/oauth/authorize"
          create-session="never"
          authentication-manager-ref="oauth2AuthenticationManager">
        <anonymous enabled="false"/>
        <csrf disabled="true"/>
        <form-login login-page="/login"
                    authentication-failure-url="/login?error=true"
                    default-target-url="/index"/>
    </http>

    <!--密钥协商-->
    <http pattern="/keyAgreement" security="none"/>

    <!--注册-->
    <http pattern="/register" security="none"/>
    <http pattern="/check/**" security="none"/>
    <http pattern="/login" security="none"/>

    <!--API-->
    <http
            create-session="never"
            entry-point-ref="oauth2AuthenticationEntryPoint"
            access-decision-manager-ref="oauth2AccessDecisionManager">
        <anonymous enabled="false"/>
        <csrf disabled="true"/>
        <intercept-url pattern="/**"
                       access="hasAnyRole('ROLE_STUDENT', 'ROLE_TEACHER', 'ROLE_PARENT', 'ROLE_KNOWLEDGE_NETWORK_MANAGER', 'ROLE_SYSTEM_MANAGER')"/>
        <custom-filter ref="resourceServer" before="PRE_AUTH_FILTER"/>
        <access-denied-handler ref="oauth2AccessDeniedHandler"/>
    </http>

    <oauth2:client-details-service id="clientDetailsService">
        <!--配置客户端：Web-->
        <oauth2:client client-id="knowledge-network-web"
                       authorized-grant-types="password,authorization_code"
                       secret="knowledge-network-web"
                       scope="read,write,trust"/>
        <!--测试-->
        <oauth2:client client-id="third-app"
                       authorized-grant-types="authorization_code"
                       scope="read"
                       secret="third-app"/>
    </oauth2:client-details-service>

    <!--客户端详情服务-->
    <beans:bean id="oauth2ClientDetailsUserService"
                class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
        <beans:constructor-arg ref="clientDetailsService"/>
    </beans:bean>

    <authentication-manager id="oauth2AuthenticationManager">
        <!--客户端认证-->
        <authentication-provider user-service-ref="oauth2ClientDetailsUserService">
        </authentication-provider>
        <!--用户认证-->
        <authentication-provider user-service-ref="userDetailsService">
            <!--<password-encoder ref="userEncoder"/>-->
        </authentication-provider>
    </authentication-manager>

    <!--TODO:后期添加实现用户密码加密-->
    <beans:bean id="userEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder">
        <!--使用BCryptPasswordEncoder不需要加盐，指定强度为11-->
        <beans:constructor-arg name="strength" value="11"/>
    </beans:bean>


    <!--用户详情服务-->
    <beans:bean id="userDetailsService"
                class="com.knowledge_network.auth.user.impl.KnowledgeNetworkUserDetailsServiceImpl">
        <beans:property name="rolePrefix" value="ROLE_"/>
    </beans:bean>

    <!--token存储-->
    <beans:bean id="tokenStore"
                class="org.springframework.security.oauth2.provider.token.store.JdbcTokenStore">
        <beans:constructor-arg ref="dataSource"/>
    </beans:bean>
    <!--修改token返回的数据-->
    <beans:bean id="tokenEnhancer" class="com.knowledge_network.auth.oauth2.OAuth2UserTokenEnhancer"/>
    <beans:bean id="tokenServices"
                class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <beans:property name="tokenStore" ref="tokenStore"/>
        <beans:property name="supportRefreshToken" value="true"/>
        <beans:property name="tokenEnhancer" ref="tokenEnhancer"/>
    </beans:bean>

    <beans:bean id="oauth2AuthenticationEntryPoint"
                class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint"/>
    <!--处理访问拒绝-->
    <beans:bean id="oauth2AccessDeniedHandler"
                class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>
    <!--处理认证点-->
    <beans:bean id="oauth2UserApprovalHandler"
                class="org.springframework.security.oauth2.provider.approval.DefaultUserApprovalHandler"/>
    <!--处理访问控制-->
    <beans:bean id="oauth2AccessDecisionManager"
                class="org.springframework.security.access.vote.UnanimousBased">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                <beans:bean class="org.springframework.security.access.vote.RoleVoter"/>
                <beans:bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
                <beans:bean class="org.springframework.security.web.access.expression.WebExpressionVoter"/>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>

    <!--授权服务器-->
    <oauth2:authorization-server client-details-service-ref="clientDetailsService"
                                 token-services-ref="tokenServices"
                                 user-approval-handler-ref="oauth2UserApprovalHandler"
                                 user-approval-page="forward:/oauth/confirm_access_custom">
        <!--支持的授权方式-->
        <!--第三方应用-->
        <oauth2:authorization-code authorization-code-services-ref="jdbcAuthorizationCodeServices"/>
        <!--<oauth2:implicit/>-->
        <!--刷新令牌-->
        <oauth2:refresh-token/>
        <!--<oauth2:client-credentials/>-->
        <!--自己开发的应用-->
        <oauth2:password/>
    </oauth2:authorization-server>

    <beans:bean id="jdbcAuthorizationCodeServices"
                class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices">
        <beans:constructor-arg ref="dataSource"/>
    </beans:bean>

    <beans:bean id="clientCredentialsTokenEndpointFilter"
                class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <beans:property name="authenticationManager" ref="oauth2AuthenticationManager"/>
    </beans:bean>

    <!--资源服务器-->
    <oauth2:resource-server id="resourceServer"
                            resource-id="knowledge-network-resource"
                            token-services-ref="tokenServices"/>
</beans:beans>